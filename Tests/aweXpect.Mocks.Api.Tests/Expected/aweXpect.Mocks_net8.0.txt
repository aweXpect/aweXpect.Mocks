[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.Mocks.git")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace aweXpect.Mocks.Exceptions
{
    public abstract class MockException : System.Exception
    {
        protected MockException(string message) { }
        protected MockException(string message, System.Exception innerException) { }
    }
    public class MockNotSetupException : aweXpect.Mocks.Exceptions.MockException
    {
        public MockNotSetupException(string message) { }
        public MockNotSetupException(string message, System.Exception innerException) { }
    }
}
namespace aweXpect.Mocks.Invocations
{
    public class Invocation
    {
        public Invocation() { }
    }
    public class MethodInvocation : aweXpect.Mocks.Invocations.Invocation
    {
        public MethodInvocation(string name, object?[] parameters) { }
        public string Name { get; }
        public object?[] Parameters { get; }
    }
    public class PropertyGetterInvocation : aweXpect.Mocks.Invocations.Invocation
    {
        public PropertyGetterInvocation(string propertyName) { }
        public string Name { get; }
    }
    public class PropertySetterInvocation : aweXpect.Mocks.Invocations.Invocation
    {
        public PropertySetterInvocation(string propertyName, object? value) { }
        public string Name { get; }
        public object? Value { get; }
    }
}
namespace aweXpect.Mocks
{
    public class MockBehavior : System.IEquatable<aweXpect.Mocks.MockBehavior>
    {
        public MockBehavior() { }
        public aweXpect.Mocks.MockBehavior.IDefaultValueGenerator DefaultValueGenerator { get; init; }
        public bool ThrowWhenNotSetup { get; init; }
        public static aweXpect.Mocks.MockBehavior Default { get; }
        public interface IDefaultValueGenerator
        {
            T Generate<T>();
        }
    }
    public abstract class Mock<T> : aweXpect.Mocks.Setup.IMockSetup
    {
        protected Mock(aweXpect.Mocks.MockBehavior mockBehavior) { }
        public System.Collections.Generic.IReadOnlyList<aweXpect.Mocks.Invocations.Invocation> Invocations { get; }
        public abstract T Object { get; }
        public aweXpect.Mocks.Setup.MockSetup<T> Setup { get; }
        public static T op_Implicit(aweXpect.Mocks.Mock<T> mock) { }
    }
    public static class With
    {
        public static aweXpect.Mocks.With.Parameter<T> Any<T>() { }
        public abstract class Parameter
        {
            protected Parameter() { }
            public abstract bool Matches(object? value);
        }
        public abstract class Parameter<T> : aweXpect.Mocks.With.Parameter
        {
            protected Parameter() { }
            protected abstract bool Matches(T value);
            public override bool Matches(object? value) { }
            public static aweXpect.Mocks.With.Parameter<T> op_Implicit(T value) { }
        }
    }
    public static class With<T>
    {
        public static aweXpect.Mocks.With.Parameter<T> Matching(System.Func<T, bool> predicate) { }
    }
}
namespace aweXpect.Mocks.Setup
{
    public interface IMethodSetup
    {
        int InvocationCount { get; }
        bool Matches(aweXpect.Mocks.Invocations.Invocation invocation);
    }
    public interface IMockSetup
    {
        aweXpect.Mocks.MockBehavior Behavior { get; }
        void Execute(string methodName, params object?[] parameters);
        TResult Execute<TResult>(string methodName, params object?[] parameters);
        TResult Get<TResult>(string propertyName);
        void RegisterMethod(aweXpect.Mocks.Setup.MethodSetup methodSetup);
        void RegisterProperty(string propertyName, aweXpect.Mocks.Setup.PropertySetup propertySetup);
        void Set(string propertyName, object? value);
    }
    public abstract class MethodSetup : aweXpect.Mocks.Setup.IMethodSetup
    {
        protected MethodSetup() { }
        protected abstract void ExecuteCallback(aweXpect.Mocks.Invocations.Invocation invocation);
        protected abstract TResult GetReturnValue<TResult>(aweXpect.Mocks.Invocations.Invocation invocation);
        protected abstract bool IsMatch(aweXpect.Mocks.Invocations.Invocation invocation);
    }
    public class MethodWithReturnValueSetup<TReturn> : aweXpect.Mocks.Setup.MethodSetup
    {
        public MethodWithReturnValueSetup(string name) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn> Callback(System.Action callback) { }
        protected override void ExecuteCallback(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override TResult GetReturnValue<TResult>(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override bool IsMatch(aweXpect.Mocks.Invocations.Invocation invocation) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn> Returns(System.Func<TReturn> callback) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn> Returns(TReturn returnValue) { }
    }
    public class MethodWithReturnValueSetup<TReturn, T> : aweXpect.Mocks.Setup.MethodSetup
    {
        public MethodWithReturnValueSetup(string name, aweXpect.Mocks.With.Parameter match) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn, T> Callback(System.Action callback) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn, T> Callback(System.Action<T> callback) { }
        protected override void ExecuteCallback(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override TResult GetReturnValue<TResult>(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override bool IsMatch(aweXpect.Mocks.Invocations.Invocation invocation) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn, T> Returns(System.Func<TReturn> callback) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn, T> Returns(System.Func<T, TReturn> callback) { }
        public aweXpect.Mocks.Setup.MethodWithReturnValueSetup<TReturn, T> Returns(TReturn returnValue) { }
    }
    public class MethodWithoutReturnValueSetup : aweXpect.Mocks.Setup.MethodSetup
    {
        public MethodWithoutReturnValueSetup(string name) { }
        public aweXpect.Mocks.Setup.MethodWithoutReturnValueSetup Callback(System.Action callback) { }
        protected override void ExecuteCallback(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override TResult GetReturnValue<TResult>(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override bool IsMatch(aweXpect.Mocks.Invocations.Invocation invocation) { }
    }
    public class MethodWithoutReturnValueSetup<T> : aweXpect.Mocks.Setup.MethodSetup
    {
        public MethodWithoutReturnValueSetup(string name, aweXpect.Mocks.With.Parameter match) { }
        public aweXpect.Mocks.Setup.MethodWithoutReturnValueSetup<T> Callback(System.Action callback) { }
        public aweXpect.Mocks.Setup.MethodWithoutReturnValueSetup<T> Callback(System.Action<T> callback) { }
        protected override void ExecuteCallback(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override TResult GetReturnValue<TResult>(aweXpect.Mocks.Invocations.Invocation invocation) { }
        protected override bool IsMatch(aweXpect.Mocks.Invocations.Invocation invocation) { }
    }
    public class MockSetup<T> : aweXpect.Mocks.Setup.IMockSetup
    {
        public MockSetup(aweXpect.Mocks.Mock<T> mock) { }
    }
    public abstract class PropertySetup
    {
        protected PropertySetup() { }
        public int GetterInvocationCount { get; }
        public int SetterInvocationCount { get; }
        protected abstract TResult InvokeGetter<TResult>();
        protected abstract void InvokeSetter(object? value);
    }
    public class PropertySetup<T> : aweXpect.Mocks.Setup.PropertySetup
    {
        public PropertySetup() { }
        public aweXpect.Mocks.Setup.PropertySetup<T> InitializeWith(T value) { }
        protected override TResult InvokeGetter<TResult>() { }
        protected override void InvokeSetter(object? value) { }
        public aweXpect.Mocks.Setup.PropertySetup<T> OnGet(System.Action callback) { }
        public aweXpect.Mocks.Setup.PropertySetup<T> OnSet(System.Action<T> callback) { }
    }
}